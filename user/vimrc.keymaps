
let mapleader = ","

map Å‚ ~

nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

vnoremap <leader>u S<ul>

vnoremap <space> ;
vnoremap <C-space> :normal ,<cr>
nnoremap <space> ;
nnoremap <C-space> :normal ,<cr>

nmap <leader>ec :.w !bc -l<CR>
nmap <leader>es :exec "!".expand(getline("."))<CR>
nmap <leader>E :exec "!".expand(getline("."))<CR>dd
nmap <leader>rc yyp:.!bc -l<CR>
nmap <leader>rs :exec "r!".expand(getline("."))<CR>
nmap <leader>ve :tabnew ~/.vimrc<CR>
nmap <leader>vr :source ~/.vimrc<CR>:redraw<CR>

nnoremap gf <C-W>gf

nmap <leader>aj :!column -t<CR>
vmap <leader>aj :!column -t<CR>
nmap <leader>ac :center<CR>
vmap <leader>ac :center<CR>
nmap <leader>ah :left<CR>
vmap <leader>ah :left<CR>
nmap <leader>al :right<CR>
vmap <leader>al :right<CR>
nmap <leader><Space>  :%s/Â¬/ /g<CR>

vmap <leader>S :sort!<CR>
vmap <leader>s :sort<CR>

nnoremap <leader>fa cc!fopen
nnoremap <leader>fe cc!vim
nnoremap <leader>fr cc!vimrenamer -rls
nnoremap <leader>fu cc!vimrenamer -rlsoU
nnoremap <leader>fv cc!vlc
nnoremap <leader>f gqq
vnoremap <leader>f gq

vmap <leader>y "+y
nmap <leader>yap vip"+y
vmap <leader>d "+d
nmap <leader>yy V"+y
nmap <leader>dd V"+ydd
vmap <leader>P "+gP
nmap <leader>P "+gP
vmap <leader>p "+gp
nmap <leader>p "+gp

" Para alineacion rapida <leader>aq <leader>ac <leader>ad
nmap <leader>aj :!column -t<CR>
vmap <leader>aj :!column -t<CR>
nmap <leader>ac :center<CR>
vmap <leader>ac :center<CR>
nmap <leader>ah :left<CR>
vmap <leader>ah :left<CR>
nmap <leader>al :right<CR>
vmap <leader>al :right<CR>

nmap <leader>! :python3 comentado("!")<CR>
nmap <leader>" :python3 comentado("\"")<CR>
nmap <leader>$ :python3 comentado("$")<CR>
nmap <leader>% :python3 comentado("%")<CR>
nmap <leader>/ :python3 comentado("/*", "*/")<CR>
nmap <leader>< :python3 comentado("<!--", "-->")<CR>
nmap <leader>c :python3 comentado()<CR>
nmap <leader>Â· :python3 comentado("# ")<CR>
vmap <leader>! :python3 comentado("!")<CR>
vmap <leader>" :python3 comentado("\"")<CR>
vmap <leader>$ :python3 comentado("$")<CR>
vmap <leader>% :python3 comentado("%")<CR>
vmap <leader>/ :python3 comentado("/*", "*/")<CR>
vmap <leader>< :python3 comentado("<!--", "-->")<CR>
vmap <leader>c :python3 comentado()<CR>
vmap <leader>Â· :python3 comentado("# ")<CR>

python3 << EOF
import vim

def comentado(inicio=None, final=None):
    """ si ejecutado sin argumentos intenta usar cms"""
    if not inicio:
        cms = vim.current.buffer.options["cms"].decode() or "%s"
        inicio, final = cms.split("%s")
    si = False
    no = False
    rango = vim.current.range
    if not final:
        for indice in range(len(rango)):
            if rango[indice].strip():
                if rango[indice].strip().startswith(str(inicio)):
                    si = True
                else:
                    no = True
        print(si, no, inicio, final)
        if no:
            for indice in range(len(rango)):
                if rango[indice].strip():
                    rango[indice] = str(inicio) + rango[indice]
        elif si and not no:
            for indice in range(len(rango)):
                rango[indice] = rango[indice][rango[indice].find(inicio) + len(inicio):]
    else:
        if (rango[0].strip().startswith(inicio) and
                rango[-1].strip().endswith(final)):
            rango[0] = rango[0][rango[0].index(inicio) + len(inicio):]
            rango[-1] = rango[-1][:rango[-1].rindex(final)]
        else:
            rango[0] = inicio + rango[0]
            rango[-1] = rango[-1] + final

EOF

nmap <leader>g :Git
nmap <leader>gB :Gblame<CR>
nmap <leader>gC :Gcommit<CR>
nmap <leader>gR :Gremove<CRr
nmap <leader>gb :Gbrowse<CR>
nmap <leader>gc :Gcommit -m ""
nmap <leader>gd :Gdiff<CR>
nmap <leader>ge :Gedit<CR>
nmap <leader>gg :Ggrep
nmap <leader>gl :Glog<cr>
nmap <leader>gm :Gmove
nmap <leader>gp :Git push<CR>:redraw!<>
nmap <leader>gr :Gread<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gw :Gwrite<CR>
vmap <leader>gB :Gblame<CR>
vmap <leader>gb :Gbrowse<CR>
vmap <leader>gd :Gdiff<CR>
vmap <leader>gr :Gread<CR>
vmap <leader>i :!gindent -npro -nut -nlp -bli4 -br -nprs -nsc -nss -pi4<CR>

nmap <leader>it :r!date +"\%A \%d \%B \%Y \%H:\%M:\%S"
nmap <leader>iT :-1r!date +"\%A \%d \%B \%Y \%H:\%M:\%S
nmap <leader>id :r!date +"\%A \%d \%B \%Y"
nmap <leader>iD :-1r!date +"\%A \%d \%B \%Y"
vmap <leader>qa :PyFlakeAuto<CR>
nmap <leader>ql :PyFlake<CR>
nmap <leader>qe oraise NotImplementedError("Not implemented!")
nmap <leader>qE Oraise NotImplementedError("Not implemented!")
imap <leader>qe raise NotImplementedError("Generic exception")
nmap <leader>sn /.*NotImplementedError*<CR>
nmap <leader>du :diff<CR>
nmap <leader>dr :diff<CR>
nmap <leader>ds ggyG:%s/^<\{7}\_.\{-}=\{7}.*\n//ig<CR>:%s/^>\{7}.*\n//ig<CR>:diffthis<CR>:rightb vnew<CR>PGdd:%s/^=\{7}\_.\{-}>\{7}.*\n//ig<CR>:%s/^<\{7}.*\n//ig<CR>:set filetype=xml<CR>:diffthis<CR>
nmap <leader>dh <C-w>hggdGdd<C-w>lggyG<C-w>hP
nmap <leader>dl <C-w>lggdGdd<C-w>hggyG<C-w>lP
nmap <leader>dn ]c
nmap <leader>dN [c
nmap <leader>dj :diffget<CR>
nmap <leader>dk :diffput<CR>
nmap <leader>ta :set filetype=awk<CR>
nmap <leader>tc :set filetype=c<CR>
nmap <leader>te :set filetype=erlang<CR>
nmap <leader>th :set filetype=haskell<CR>
nmap <leader>ti :set filetype=ini<CR>
nmap <leader>tj :set filetype=json<CR>
nmap <leader>tm :set filetype=markdown<CR>
nmap <leader>tp :set filetype=python<CR>/ $<CR>
nmap <leader>tr :set filetype=rst<CR>
nmap <leader>ts :set filetype=sh<CR>
nmap <leader>tv :set filetype=vim<CR>
nmap <leader>tw :set filetype=wiki<CR>
nmap <leader>tz :set filetype=zsh<CR>

nmap <M-Right> <C-W>w
nmap <M-Left> <C-W>W
imap <C-H> <C-D>
imap <C-L> <C-T>
imap <leader>h <C-D>
imap <leader>l <C-T>
nmap <leader>h <<
nmap <leader>l >>
vmap <leader>h <
vmap <leader>l >

nmap <leader>w :w<CR>
nmap <leader>W :w!<CR>
