#!/bin/sh

<<<<<<< HEAD
pip install -q ipython pdbpp

notify mantener pytest\
    --exitfirst \
    --failed-first \
    --stepwise \
    --pdb \
    --pdbcls=IPython.terminal.debugger:TerminalPdb \
||||||| e03e8a87
pip install -q ipython pdbpp

notify mantener pytest\
    --exitfirst\
    --failed-first\
    --stepwise\
    --pdb\
    --pdbcls=IPython.terminal.debugger:TerminalPdb\
=======
pip install -q ipython pdbpp pytest-watch

# notify mantener pytest\
#     --exitfirst \
#     --failed-first \
#     --stepwise \
#     --pdb \
#     --pdbcls=IPython.terminal.debugger:TerminalPdb \
#     $@

ptw \
    # --pdb \
    --onpass "notify true"
    --onfail "notify false"
    -- \
    --pdbcls=IPython.terminal.debugger:TerminalPdb \
    --exitfirst \
    --failed-first \
    --stepwise \
>>>>>>> 51dc7815eba281f2aad58d9f493553a9c3e7d121
    $@
<<<<<<< HEAD

# inotifywatch --help
# inotifywatch 3.14
# Gather filesystem usage statistics using inotify.
# Usage: inotifywatch [ options ] file1 [ file2 ] [ ... ]
# Options:
# 	-h|--help    	Show this help text.
# 	-v|--verbose 	Be verbose.
# 	@<file>       	Exclude the specified file from being watched.
# 	--fromfile <file>
# 		Read files to watch from <file> or `-' for stdin.
# 	--exclude <pattern>
# 		Exclude all events on files matching the extended regular
# 		expression <pattern>.
# 	--excludei <pattern>
# 		Like --exclude but case insensitive.
# 	-z|--zero
# 		In the final table of results, output rows and columns even
# 		if they consist only of zeros (the default is to not output
# 		these rows and columns).
# 	-r|--recursive	Watch directories recursively.
# 	-t|--timeout <seconds>
# 		Listen only for specified amount of time in seconds; if
# 		omitted or 0, inotifywatch will execute until receiving an
# 		interrupt signal.
# 	-e|--event <event1> [ -e|--event <event2> ... ]
# 		Listen for specific event(s).  If omitted, all events are 
# 		listened for.
# 	-a|--ascending <event>
# 		Sort ascending by a particular event, or `total'.
# 	-d|--descending <event>
# 		Sort descending by a particular event, or `total'.
#
# Exit status:
# 	0  -  Exited normally.
# 	1  -  Some error occurred.
#
# Events:
# 	access		file or directory contents were read
# 	modify		file or directory contents were written
# 	attrib		file or directory attributes changed
# 	close_write	file or directory closed, after being opened in
# 	           	writable mode
# 	close_nowrite	file or directory closed, after being opened in
# 	           	read-only mode
# 	close		file or directory closed, regardless of read/write mode
# 	open		file or directory opened
# 	moved_to	file or directory moved to watched directory
# 	moved_from	file or directory moved from watched directory
# 	move		file or directory moved to or from watched directory
# 	create		file or directory created within watched directory
# 	delete		file or directory deleted within watched directory
# 	delete_self	file or directory was deleted
# 	unmount		file system containing file or directory unmounted
# 1
||||||| e03e8a87
=======

#   -c --clear            Clear the screen before each run.
#   -n --nobeep           Do not beep on failure.
#   -w --wait             Waits for all tests to complete before re-running.
#                         Otherwise, tests are interrupted on filesystem events.
#   --beforerun <cmd>     Run arbitrary command before tests are run.
#   --afterrun <cmd>      Run arbitrary command on completion or interruption.
#                         The exit code of "py.test" is passed as an argument.
#   --onpass <cmd>        Run arbitrary command on pass.
#   --onfail <cmd>        Run arbitrary command on failure.
#   --onexit <cmd>        Run arbitrary command when exiting pytest-watch.
#   --runner <cmd>        Run a custom command instead of "py.test".
#   --pdb                 Start the interactive Python debugger on errors.
#                         This also enables --wait to prevent pdb interruption.
#   --spool <delay>       Re-run after a delay (in milliseconds), allowing for
#                         more file system events to queue up (default: 200 ms).
#   -p --poll             Use polling instead of OS events (useful in VMs).
#   -v --verbose          Increase verbosity of the output.
#   -q --quiet            Decrease verbosity of the output (precedence over -v).
#   -V --version          Print version and exit.
#   -h --help             Print help and exit.
# 0
>>>>>>> 51dc7815eba281f2aad58d9f493553a9c3e7d121
