#!/usr/bin/env python

from subprocess import check_output
import re
import webbrowser


def readconf():
    for i in range(3):
        level = "../" * i
        try:
            raw = open("%s.git/config" % level).read()
            return raw
        except:
            pass


def get_config():
    """
    WTF Implementation
    """
    raw = readconf()
    lines = (line.strip() for line in raw.splitlines())
    lines = (line.split("#")[0] for line in raw.splitlines())

    config = {}
    write_to = config
    for line in lines:
        if line.startswith("["):
            line = line.strip("[]")
            keys = [part.strip('" ') for part in line.split()]
            write_to = config
            for key in keys:
                new_section = config.get(key, {})
                write_to[key] = new_section
                write_to = new_section
        elif line:
            key, value = line.split("=")
            key = key.strip()
            value = value.strip()
            write_to[key] = value

    return config


def get_parent_branch(branch=None):
    branch = branch or get_branch()
    command = "git show-branch"
    output = check_output(command, shell=True).decode()
    lines = output.splitlines()
    ancestors = (line for line in lines if "*" in line)  # similar to --contained
    not_contained = (line for line in lines if not branch in line)  # similar to --merged
    parent_line = next(not_contained)  # Only first
    parent_branch = re.search(r"\[(.*?)[~^\]]", parent_line).group(1)  # Avoid distance numbers
    return parent_branch


def get_branch():
    command = "git rev-parse --abbrev-ref HEAD"
    branch = check_output(command, shell=True).decode().strip()
    return branch


def remote2url_fork_repo(remote):
    remote_url = remote["url"]
    protocol, path = remote_url.split("@")
    host, repository = path.split(":")
    if "github" in host:
        fork, repo_url = repository.split("/")
        repo_name = ".".join(repo_url.split(".")[:-1])
        return host, fork, repo_name
    elif "gitlab" in host:
        organization, project, repo_url = repository.split("/")
        repo_name = ".".join(repo_url.split(".")[:-1])
        return host, "%s/%s" % (organization, project), repo_name
    else:
        raise NotImplementedError("Not recognized host.")


def open_jobs():
    config = get_config()
    remotes = config["remote"]
    branch = get_branch()
    parent = get_parent_branch()

    origin = remotes["origin"]
    host, fork, name = remote2url_fork_repo(origin)

    if "gitlab" in host:
        """
        https://gitlab.com/white.space/Qi/data-ingestion.consumer/-/jobs
        """
        url = ("https://{host}/{fork}/{name}/-/jobs").format(**locals())
    else:
        raise NotImplementedError("Not implemented!")

    return webbrowser.open(url)


if __name__ == "__main__":
    open_jobs()
