#!/usr/bin/env python3

from subprocess import check_output as _check_output
from subprocess import call as _call
from urllib.parse import quote_plus as escape_url
from urllib.parse import unquote_plus as unescape_url
from functools import wraps
import re
import webbrowser


@wraps(_call)
def call(command, *args, **kwargs):
    print("> Command: %s" % command)
    return _call(command, *args, **kwargs)


@wraps(_check_output)
def check_output(command, *args, **kwargs):
    print("> Command: %s" % command)
    return _check_output(command, *args, **kwargs)


def readconf():
    """
    Is there a better way?
    """
    for i in range(5):
        level = "../" * i
        try:
            raw = open("%s.git/config" % level).read()
            return raw
        except:
            pass


def get_config():
    """
    WTF Implementation
    """
    raw = readconf()
    lines = (line.strip() for line in raw.splitlines())
    lines = (line.split("#")[0] for line in raw.splitlines())

    config = {}
    write_to = config
    for line in lines:
        if line.startswith("["):
            line = line.strip("[]")
            keys = [part.strip('" ') for part in line.split()]
            write_to = config
            for key in keys:
                new_section = config.get(key, {})
                write_to[key] = new_section
                write_to = new_section
        elif line:
            key, value = line.split("=")
            key = key.strip()
            value = value.strip()
            write_to[key] = value

    return config


def get_parent_branch(branch=None):
    """
    Return parent branch if found and not merged,
    else returns None.
    """
    branch = branch or get_branch()
    remote_branches = get_remote_branches()

    command = "git show-branch"
    output = check_output(command, shell=True).decode()
    lines = output.splitlines()
    lines = (line for line in lines if "*" in line)  # ancestors
    lines = (line for line in lines if not branch in line)  # not contained
    for line in lines:
        parent_branch = re.search(r"\[(.*?)[~^\]]", line).group(1)
        if parent_branch in remote_branches:
            return parent_branch
    else:
        print("Already merged?")


def get_branch():
    """
    Returns current branch
    """
    command = "git rev-parse --abbrev-ref HEAD"
    branch = check_output(command, shell=True).decode().strip()
    return branch


def get_remote_branches():
    """
    List branches tracked in origin
    """
    command = "git ls-remote --heads -q"
    output = check_output(command, shell=True).decode()
    lines = output.splitlines()
    refs = (line.split()[-1] for line in lines)
    branches = (ref[len("refs/heads/") :] for ref in refs)
    return set(branches)


def remote2url_fork_repo(remote):
    """
    Takes remote object as found in .git/config and returns tuple:
        (url, fork, repo)
    """
    remote_url = remote["url"]
    protocol, path = remote_url.split("@")
    host, repository = path.split(":")
    if "github" in host:
        fork, repo_url = repository.split("/")
        repo_name = ".".join(repo_url.split(".")[:-1])
        return host, fork, repo_name
    elif "gitlab" in host:
        organization, project, repo_url = repository.split("/")
        repo_name = ".".join(repo_url.split(".")[:-1])
        fork = "%s/%s" % (organization, project)
        return host, fork, repo_name
    elif "bitbucket" in host:
        organization, repo_url = repository.split("/")
        repo_name = ".".join(repo_url.split(".")[:-1])
        fork = "%s/%s" % (organization, repo_name)
        return host, fork, repo_name
    else:
        raise NotImplementedError("Not recognized host.")


def open_compare():
    """
    Concerts all available info to open a comparassion between current branch
    and, guessed, most relevant parent.

    It works with most common instalattions of github and gitlab.
    """
    config = get_config()
    remotes = config["remote"]
    branch = unescape_url(get_branch())
    parent = unescape_url(get_parent_branch() or "master")
    branch_url = escape_url(get_branch())
    parent_url = escape_url(get_parent_branch() or "master")
    assert "%2F" not in parent

    origin = remotes["origin"]
    o_host, o_fork, o_name = remote2url_fork_repo(origin)

    upstream = remotes.get("upstream", origin)
    u_host, u_fork, u_name = remote2url_fork_repo(upstream)

    if "github" in u_host:
        url = f"https://{u_host}/{u_fork}/{u_name}/compare/{parent}...{o_fork}:{branch}"
        return webbrowser.open(url)
    elif "gitlab" in u_host:
        url = f"https://{u_host}/{u_fork}/{u_name}/compare/{parent}...{branch}"
        return webbrowser.open(url)
    else:
        command = "git diff %s..%s" % ("HEAD", parent)
        return call(command, shell=True)


if __name__ == "__main__":
    open_compare()
