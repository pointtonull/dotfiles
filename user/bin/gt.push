#!/usr/bin/env python3

from subprocess import check_output, call
from urllib.parse import quote_plus as escape_url
import re
import time
import webbrowser


def readconf():
    """
    Is there a better way?
    """
    for i in range(3):
        level = "../" * i
        try:
            raw = open("%s.git/config" % level).read()
            return raw
        except:
            pass


def get_config():
    """
    WTF Implementation
    """
    raw = readconf()
    lines = (line.strip() for line in raw.splitlines())
    lines = (line.split("#")[0] for line in raw.splitlines())

    config = {}
    write_to = config
    for line in lines:
        if line.startswith("["):
            line = line.strip("[]")
            keys = [part.strip('" ') for part in line.split()]
            write_to = config
            for key in keys:
                new_section = config.get(key, {})
                write_to[key] = new_section
                write_to = new_section
        elif line:
            key, value = line.split("=")
            key = key.strip()
            value = value.strip()
            write_to[key] = value

    return config


def get_parent_branch(branch=None):
    """
    Return parent branch if found and not merged,
    else returns None.
    """
    branch = branch or get_branch()
    remote_branches = get_remote_branches()

    command = "git show-branch"
    output = check_output(command, shell=True).decode()
    lines = output.splitlines()
    lines = (line for line in lines if "*" in line)  # ancestors
    lines = (line for line in lines if not branch in line)  # not contained
    for line in lines:
        parent_branch = re.search(r"\[(.*?)[~^\]]", line).group(1)
        if parent_branch in remote_branches:
            return parent_branch
    else:
        print("Already merged?")


def get_branch():
    """
    Returns current branch
    """
    command = "git rev-parse --abbrev-ref HEAD"
    branch = check_output(command, shell=True).decode().strip()
    return branch


def pull(remote="origin", branch=None):
    """
    Pull to origing branch
    """
    if remote and branch:
        command = f"git pull '{remote}' '{branch}'"
    else:
        command = "git pull"

    print(f"Command: {command}")
    error = call(command, shell=True)
    return error


def push(remote="origin", branch=None):
    """
    Push to origing branch
    """
    if remote and branch:
        command = f"git push '{remote}' '{branch}'"
    else:
        command = "git push"

    print(f"Command: {command}")
    error = call(command, shell=True)
    return error


def open_compare():
    """
    Concerts all available info to open a comparassion between current branch
    and, guessed, most relevant parent.

    It works with most common instalattions of github and gitlab.
    """
    branch = get_branch()

    wait = 1
    for attempt in range(15):
        error = push("origin", branch)
        if not error:
            break
        else:
            print(f"Error {error}\n")
            wait *= 1.5
            time.sleep(wait)
    else:
        print("Done")


if __name__ == "__main__":
    open_compare()
