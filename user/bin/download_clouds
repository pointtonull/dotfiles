#!/usr/bin/python3
#-*- coding: UTF-8 -*-
# Usage:
#   python download_clouds.py - to save the output as clouds_4096.jpg
#   python download_coulds.py output.jpg - to save the output as output.jpg
# (C) 2004 Michal Pasternak <michal@pasternak.w.lub.pl>
# This file is in public domain.
maxDownloadFrequencyHours = .15

import os
import random
import urllib
import sys
import stat
import time
import shutil

defaultOutputFile = "clouds_4096.jpg"

archiveDir = None # "/usr/public/cloudsArchive"
mirrors = [
               "ftp://mirror.pacific.net.au/pub2/xplanet/clouds_4096.jpg",
               "http://www.ruwenzori.net/earth/clouds_4096.jpg",
               "http://xplanet.arculeo.com/clouds_4096.jpg",
               "http://xplanet.dyndns.org/clouds/clouds_4096.jpg",
               "http://userpage.fu-berlin.de/~jml/clouds_4096.jpg",
               "http://rcswww.urz.tu-dresden.de/~es179238/clouds_4096.jpg",
               "http://home.megapass.co.kr/~ysy00/cloud_data/clouds_4096.jpg",
               "http://home.megapass.co.kr/~holywatr/cloud_data/clouds_4096.jpg",
               "http://user.chol.com/~winxplanet/cloud_data/clouds_4096.jpg",
               "http://home.megapass.co.kr/~gitto88/cloud_data/clouds_4096.jpg",
               "http://www.wizabit.eclipse.co.uk/xplanet/files/mirror/clouds_4096.jpg",
               "http://www.wizabit.eclipse.co.uk/xplanet/files/local/clouds_4096.jpg",
               "ftp://ftp.iastate.edu/pub/xplanet/clouds_4096.jpg",
               "http://xplanet.explore-the-world.net/clouds_4096.jpg" ]

try:
    outputFile = sys.argv[1]
except:
    outputFile = defaultOutputFile


try:
    s = os.stat(outputFile)
    mtime = s[stat.ST_MTIME]
    fs = s[stat.ST_SIZE]
    found = True
except:
    mtime = 0
    fs = 0
    found = False

if time.time() - mtime < maxDownloadFrequencyHours * 3600 and fs > 400000:
    sys.stderr.write("File is already up to date!\n")
    sys.exit(0)
else:
    if found and archiveDir is not None:
        archName = os.path.join(archiveDir, time.strftime("%Y-%m-%d_%H-%I") + "_" + os.path.basename(outputFile))
        sys.stderr.write("Archivizing old file to %s...\n" % archName)
        shutil.move(outputFile, archName)

url = mirrors [random.randint(0, len(mirrors) - 1)]
sys.stderr.write("Using %s\nDownloading...\n" % url)
urllib.urlretrieve(url, outputFile + ".tmp")
shutil.move(outputFile + ".tmp", outputFile)
os.system("sudo rm -r ~/tilecache/nubes")
